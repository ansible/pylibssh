name: 🏗 📦 & test & publish

on:
  push:
  pull_request:

jobs:
  build-bin-macos:
    name: 🏗 macOS 📦 for 🐍 ${{ matrix.python-version }}
    # NOTE: I tried also making wheels for 32-bit runtime but it's
    # NOTE: proven to be useless and hard to maintain. Also macOS
    # NOTE: Catalina ditched support for 32-bit executables so it
    # NOTE: doesn't really make sense to try shimming it.
    runs-on: macos-latest
    strategy:
      matrix:
        python-version:
        # NOTE: Research on the wheel names / platform tags and how they
        # NOTE: are matched under various macOS versions:
        # NOTE: https://github.com/MacPython/wiki/wiki/Spinning-wheels
        - 3.8
        - 2.7
        - 3.7
        - 3.6
        - 3.5

    env:
      PEP517_ARGS: --binary
      PY_COLORS: 1
      TOXENV: build-wheels-pip,delocate-macos-wheels,metadata-validation
      TOX_PARALLEL_NO_SPINNER: 1

    steps:
    - name: Patch env context to match docs expectations
      run: |
        echo "::set-env name=HOME::${HOME}"
    - name: >-
        Find the download URL for official
        CPython distribution from python.org
      id: probe-python
      run: |
        function probe_url() {
          local py_ver="$1"
          local macos_ver="$2"
          [ $(curl -I --write-out '%{http_code}' --silent --output /dev/null "https://www.python.org/ftp/python/${py_ver}/python-${py_ver}-macosx10.${macos_ver}.pkg") == '200' ] && return 0
          return 1
        }

        function find_last_macos_py() {
          for macos_ver in 6 9
          do
            for py_ver in $*
            do
              >&2 echo Probing py${py_ver} and macosx10.${macos_ver}
              # FIXME: Can we set outputs right here?
              if probe_url $py_ver $macos_ver
              then
                >&2 echo "Found pkg: py${py_ver} w/ macosx10.${macos_ver}"
                echo "::set-output name=py_ver_long::${py_ver}"
                echo "::set-output name=download_url::https://www.python.org/ftp/python/${py_ver}/python-${py_ver}-macosx10.${macos_ver}.pkg"
                return 0
              fi
            done
          done
          >&2 echo Failed looking up macOS pkg for $*
          return 1
        }

        LONG_VER_SUGGESTIONS=$(git ls-remote --sort -v:refname --tags git://github.com/python/cpython.git "${{ matrix.python-version }}*" "v${{ matrix.python-version }}*" | grep -v '\^{}$' | awk '{print$2}' | sed 's#^refs/tags/##;s#^v##' | grep -v '[abcepr]')
        find_last_macos_py ${LONG_VER_SUGGESTIONS}
    - name: Install Python from python.org
      run: |
        INSTALLERS_CACHE="${{env.HOME}}/.github/workflows/.tmp/python-installers"
        INSTALLER_PATH="${INSTALLERS_CACHE}/python-${LONG_VER}.pkg"

        SHORT_VER=$(echo ${LONG_VER} | awk -F. '{print$1"."$2}')

        INSTALL_PATH="/Library/Frameworks/Python.framework/Versions/${SHORT_VER}/bin"
        PYTHON_BIN="${INSTALL_PATH}/python${SHORT_VER}"

        mkdir -pv "${INSTALLERS_CACHE}"
        >&2 echo Downloading "${DOWNLOAD_URL}" into "${INSTALLER_PATH}"...
        wget -O "${INSTALLER_PATH}" "${DOWNLOAD_URL}"
        sudo installer -verboseR -dumplog -pkg "${INSTALLER_PATH}" -target /

        >&2 echo Setting up '$PATH' and a binary output var for Python ${LONG_VER}
        echo "::add-path::${INSTALL_PATH}"
        echo "::set-output name=binary::${PYTHON_BIN}"
      env:
        DOWNLOAD_URL: ${{ steps.probe-python.outputs.download_url }}
        LONG_VER: ${{ steps.probe-python.outputs.py_ver_long }}
      id: install-python
    - name: >-
        Install certificates for Python ${{ matrix.python-version }}
        from python.org, if necessary, by running
        'Install Certificates.command'
      if: matrix.python-version != 3.5
      run: >-
        /Applications/Python\ ${{ matrix.python-version }}/Install\ Certificates.command
    - name: >-
        Install certificates for Python ${{ matrix.python-version }}
        from python.org, if necessary, by installing certifi
      if: matrix.python-version == 3.5
      run: >-
        curl https://bootstrap.pypa.io/get-pip.py
        |
        ${{ steps.install-python.outputs.binary }} - 'certifi'
    - name: Log official Python dist version from python.org
      run: ${{ steps.install-python.outputs.binary }} --version
    - name: Install libssh from brew
      run: brew install libssh  # @0.9.4  # pinning the version does not work
    # FIXME: can we pre-build libssh once in a pre-requisite job?
    # NOTE: Currently we use a brew-installed libssh build that also
    # NOTE: pulls-in openssl@1.1 as well. In the future we may want to
    # NOTE: be in control of what and how we build. This is what the
    # NOTE: commented out code below is for. Doing own builds may help
    # NOTE: us produce a smaller footprint by not building the server-
    # NOTE: side APIs. Controlling the supply chain is also safer from
    # NOTE: the security perspective. Also, it breaks when brew replaces
    # NOTE: the versions.
    #- name: Fetch libssh src
    #  env:
    #    LIBSSH_VERSION: 0.9.3
    #  run: >-
    #    git clone --depth=1
    #    -b "libssh-${{ env.LIBSSH_VERSION }}"
    #    https://git.libssh.org/projects/libssh.git
    #- name: Make libssh build dir
    #  run: mkdir -pv build
    #  working_directory: libssh
    #- name: Build libssh
    #  env:
    #    CFLAGS: -I/usr/local/opt/openssl/include
    #    LDFLAGS: -L/usr/local/opt/openssl/lib
    #  run: |
    #    cmake ..
    #    make
    #    make install/strip
    #  working_directory: libssh/build
    - name: Install tox
      run: >-
        ${{ steps.install-python.outputs.binary }} -m
        pip install
        --user
        tox
    - name: Check out src from Git
      uses: actions/checkout@v2
    - name: Get history and tags for SCM versioning to work
      run: |
        git fetch --prune --unshallow
        git fetch --depth=1 origin +refs/tags/*:refs/tags/*
    - name: Pre-populate tox env
      run: ${{ steps.install-python.outputs.binary }} -m tox -p auto --parallel-live -vvvv --notest
    - name: Instruct setuptools-scm not to add a local version part
      if: >-
        github.event_name == 'push' &&
        github.ref == 'refs/heads/devel'
      run: >-
        echo 'local_scheme = "no-local-version"'
        >>
        pyproject.toml
    - name: Build dist
      run: ${{ steps.install-python.outputs.binary }} -m tox -p auto --parallel-live -vvvv -e build-wheels-pip
    - name: Bundle external shared libs
      run: ${{ steps.install-python.outputs.binary }} -m tox -p auto --parallel-live -vvvv -e delocate-macos-wheels -- dist/*.whl
    - name: Verify wheel metadata
      run: ${{ steps.install-python.outputs.binary }} -m tox -p auto --parallel-live -vvvv -e metadata-validation
    - name: Install pytest and its plugins
      run: >-
        ${{ steps.install-python.outputs.binary }} -m
        pip install
        --user
        pytest pytest-cov pytest-xdist
    - name: Install the generated Python wheel distribution
      run: >-
        ${{ steps.install-python.outputs.binary }} -m
        pip install
        --user
        --no-index -f dist
        --only-binary ansible-pylibssh
        ansible-pylibssh
    - name: Disable Cython coverage plugin
      run: sed -i.bak 's/.*Cython.Coverage//' .coveragerc
    - name: Run tests using pytest
      run: >-
        ${{ steps.install-python.outputs.binary }}
        -m pytest
        -m smoke
    - name: Store the binary wheel
      uses: actions/upload-artifact@v2
      with:
        name: >-
          dist-wheel-${{ runner.os }}-python${{ matrix.python-version }}
        path: dist

  build-bin-manylinux:
    name: 🏗 manylinux 📦
    runs-on: ubuntu-latest

    env:
      PY_COLORS: 1
      TOXENV: build-dists-manylinux,metadata-validation
      TOX_PARALLEL_NO_SPINNER: 1

    steps:
    - name: Switch to using Python 3.8 by default
      uses: actions/setup-python@v1
      with:
        python-version: 3.8
    - name: Install tox
      run: >-
        python -m
        pip install
        --user
        tox
    - name: Check out src from Git
      uses: actions/checkout@v2
    - name: Get history and tags for SCM versioning to work
      run: |
        git fetch --prune --unshallow
        git fetch --depth=1 origin +refs/tags/*:refs/tags/*
    - name: Pre-populate tox env
      run: python -m tox -p auto --parallel-live -vvvv --notest
    - name: Instruct setuptools-scm not to add a local version part
      if: >-
        github.event_name == 'push' &&
        github.ref == 'refs/heads/devel'
      run: >-
        echo 'local_scheme = "no-local-version"'
        >>
        pyproject.toml
    - name: Build dists and verify wheel metadata
      run: python -m tox -p auto --parallel-live -vvvv
    - name: Store the source distribution
      uses: actions/upload-artifact@v2
      with:
        name: dist-wheels-manylinux
        path: dist

  build-src:
    name: 🏗 an sdist 📦
    runs-on: ubuntu-latest

    env:
      PEP517_ARGS: --source
      PY_COLORS: 1
      TOXENV: build-dists,metadata-validation
      TOX_PARALLEL_NO_SPINNER: 1

    steps:
    - name: Switch to using Python 3.8 by default
      uses: actions/setup-python@v1
      with:
        python-version: 3.8
    - name: Install tox
      run: >-
        python -m
        pip install
        --user
        tox
    - name: Check out src from Git
      uses: actions/checkout@v2
    - name: Get history and tags for SCM versioning to work
      run: |
        git fetch --prune --unshallow
        git fetch --depth=1 origin +refs/tags/*:refs/tags/*
    - name: Pre-populate tox env
      run: python -m tox -p auto --parallel-live -vvvv --notest
    - name: Instruct setuptools-scm not to add a local version part
      if: >-
        github.event_name == 'push' &&
        github.ref == 'refs/heads/devel'
      run: >-
        echo 'local_scheme = "no-local-version"'
        >>
        pyproject.toml
    - name: Build sdist and verify metadata
      run: python -m tox -p auto --parallel-live -vvvv
    - name: Store the source distribution
      uses: actions/upload-artifact@v2
      with:
        name: dist-src
        path: dist

  all-the-dists-combo:
    name: Combine 🐍 dists 📦
    needs:
    - build-bin-macos
    - build-bin-manylinux
    - build-src
    runs-on: ubuntu-latest
    steps:
    - name: >-
        Download all the dists
      uses: actions/download-artifact@v2
      with:
        path: .github/workflows/.tmp/artifacts
    - name: Copy all the dists into the dist/ folder
      run: |
        mkdir -pv dist/
        cp -v \
          .github/workflows/.tmp/artifacts/dist-{src/*.tar.gz,wheel{s-manylinux,-macOS-python*}/*.whl} \
          dist/
    - name: >-
        Store the whole distributions
        matrix as a combined artifact
      uses: actions/upload-artifact@v2
      with:
        name: all-the-dists
        path: dist

  test-matrix:
    name: >-
      Test 🐍
      ${{ matrix.python-version }}
      ${{ matrix.runner-vm-os }}
      ${{ matrix.dist-type }} dists
    needs:
    - all-the-dists-combo
    runs-on: ${{ matrix.runner-vm-os }}-latest
    strategy:
      matrix:
        python-version:
        - 3.8
        - 2.7
        - 3.7
        - 3.6
        - 3.5
        runner-vm-os:
        - ubuntu
        - macos
        dist-type:
        - binary
        - source
        exclude:
        - dist-type: source
          runner-vm-os: ubuntu

    env:
      PY_COLORS: 1
      TOXENV: test-${{ matrix.dist-type }}-dists
      TOX_PARALLEL_NO_SPINNER: 1

    steps:
    - name: Install libssh and openssl headers on Linux
      if: >-
        matrix.dist-type == 'source' &&
        runner.os == 'Linux'
      run: sudo apt update && sudo apt install libssh-dev libssl-dev build-essential
    - name: Install libssh and openssl headers on macOS
      if: >-
        matrix.dist-type == 'source' &&
        runner.os == 'macOS'
      run: brew install libssh
    - name: Switch 🐍 to v${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install tox
      run: >-
        python -m
        pip install
        --user
        tox
    - name: Check out src from Git
      uses: actions/checkout@v2
    - name: Download all the dists
      uses: actions/download-artifact@v2
      with:
        name: all-the-dists
        path: dist/
    - name: Pre-populate tox env
      run: python -m tox -p auto --parallel-live -vvvv --notest
    - name: Run tests
      run: python -m tox -p auto --parallel-live -vvvv
    - name: Setup tmate session
      if: failure()
      uses: mxschmitt/action-tmate@v2
    - name: Send coverage data to Codecov
      uses: codecov/codecov-action@v1
      with:
        file: .test-results/pytest/cov.xml

  deploy:
    name: Publish 🐍📦 to (Test)PyPI
    needs:
    - test-matrix
    runs-on: ubuntu-latest

    env:
      PY_COLORS: 1
      TOXENV: metadata-validation
      TOX_PARALLEL_NO_SPINNER: 1

    steps:
    - name: Switch to using Python 3.8 by default
      uses: actions/setup-python@v1
      with:
        python-version: 3.8
    - name: Install tox
      run: >-
        python -m
        pip install
        --user
        tox
    - name: Check out src from Git
      uses: actions/checkout@v2
    - name: Pre-populate tox env
      run: python -m tox -p auto --parallel-live -vvvv --notest
    - name: Download all the dists
      uses: actions/download-artifact@v2
      with:
        name: all-the-dists
        path: dist/
    - name: Verify metadata
      run: python -m tox -p auto --parallel-live -vvvv
    - name: Publish 🐍📦 to TestPyPI
      if: >-
        github.event_name == 'push' &&
        github.ref == 'refs/heads/devel'
      uses: pypa/gh-action-pypi-publish@master
      with:
        password: ${{ secrets.testpypi_password }}
        repository_url: https://test.pypi.org/legacy/
    - name: Publish 🐍📦 to PyPI
      if: >-
        github.event_name == 'push' &&
        startsWith(github.ref, 'refs/tags')
      uses: pypa/gh-action-pypi-publish@master
      with:
        password: ${{ secrets.pypi_password }}


# TODO: Test install from sdist
#
# TODO: Figure out if we can use Py_LIMITED_API / PEP 384:
# TODO: * https://docs.python.org/3/c-api/stable.html
# TODO: https://github.com/cython/cython/issues/2542
